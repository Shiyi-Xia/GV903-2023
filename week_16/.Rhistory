file = "blmtweets",
data_path = "data/",
n = 1000000,
)
set_bearer()
library(academictwitteR)
set_bearer()
tweets <-
get_all_tweets(
query = "#BlackLivesMatter",
start_tweets = "2020-01-01T00:00:00Z",
end_tweets = "2020-01-05T00:00:00Z",
file = "blmtweets",
data_path = "data/",
n = 1000000,
)
library(academictwitteR)
set_bearer()
tweets <-
get_all_tweets(
query = "#BlackLivesMatter",
start_tweets = "2020-01-01T00:00:00Z",
end_tweets = "2020-01-05T00:00:00Z",
file = "blmtweets",
data_path = "data/",
n = 1000000,
)
install.packages("overviewR")
library(tensorflow)
library(keras)
library(tfdatasets)
tf$constant("Hello Tensorflow") # check that tensorflow is working
library(pacman)
install.packages("pacman")
install.packages("here")
install.packages("googleLanguageR")
library(tmap)
install.packages("peacesciencer")
install.packages("spatstat")
library(spatstat)
?quadrat.test
source("~/.active-rstudio-document", echo=TRUE)
install.packages("factoextra")
?KNNdistplot
library(factoextra)
?KNNdistplot
??KNNdistplot
install.packages("dbscan")
library(dbscan)
??KNNdistplot
?dbscan
?fviz_cluster
library(cshapes)
library(tmap)
world <- cshp(date=as.Date("2009-1-1"))
world.df = fortify(world, region="SP_ID")
names(world.df)[6] <- "SP_ID"
world.df <- join(world.df, world@data)
library(broom)
library(cshapes)
library(ggplot2)
library(dplyr)
world <- cshp(date=as.Date("2009-1-1"))
world@data$id <- rownames(world@data)
world.df<-arrange(world.df, arrange)
View(world)
View(world)
View(world)
ggplot() + geom_polygon(data=world.df,
aes(x = long, y = lat, group = group,fill = AREA))
ggplot() +
geom_polygon(data=world.df,
aes(x = long, y = lat, group = group,fill = AREA))+
coord_equal()
world <- cshp(date=as.Date("2009-1-1"))
world@data$id <- rownames(world@data)
world.df = tidy(world)
View(world)
View(world.df)
library(broom)
library(cshapes)
library(ggplot2)
library(dplyr)
world <- cshp(date=as.Date("2009-1-1"))
View(world)
plot(st_geometry(world))
library(sf)
library(sp)
plot(st_geometry(world))
ggplot() + geom_sf(data = world)
View(world)
tm_shape(world) + tm_fill("BIR74",
palette = sf.colors(5))
View(world)
tm_shape(world)
tm_shape(world) +
tm_fill()
tm_shape(world) +
tm_fill()
tm_shape(world) +
tm_borders()
?set tmap_options
?tmap_options
str(tmap_options())
tm_shape(world) +
tm_borders()
st_is_valid(world)
tmap_options(check.and.fix = TRUE)
tm_shape(world) +
tm_borders()
st_is_valid(world)
tm_shape(world) +
tm_borders()
world <- cshp(date=as.Date("2009-1-1"))
rm(list = ls())
library(broom)
library(cshapes)
library(ggplot2)
library(dplyr)
library(sf)
library(sp)
world <- cshp(date=as.Date("2009-1-1"))
plot(st_geometry(world))
View(world)
ggplot() + geom_sf(data = world)
ggplot() + geom_sf(data = world) +
theme_bw()
ggplot() + geom_sf(data = world) +
theme_void()
st_is_valid(world)
?st_is_valid
st_is_valid(world)
tm_shape(world) +
tm_borders()
ggplot() + geom_sf(data = world) +
theme_void()
ggplot() + geom_sf(data = world, lwd = 0) +
theme_void()
ggplot() + geom_sf(data = world) +
theme_void()
rm(list = ls())
library(broom)
library(cshapes)
library(ggplot2)
library(dplyr)
library(sf)
library(sp)
world <- cshp(date=as.Date("2009-1-1"))
ggplot() + geom_sf(data = world) +
theme_void()
tmap_mode("view")
st_is_valid(world)
# according to the results, it shows that some of them are not valid
tmap_options(check.and.fix = TRUE) # this line of code will help us to force
tm_shape(world) +
tm_borders()
rm(list = ls())
library(broom)
library(cshapes)
library(ggplot2)
library(dplyr)
library(sf)
library(sp)
?st_is_valid # this function helps with check whether a geometry is valid
st_is_valid(world)
world <- cshp(date=as.Date("2009-1-1"))
plot(st_geometry(world))
ggplot() +
geom_sf(data = world) +
theme_void()
st_is_valid(world)
# according to the results, it shows that some of them are not valid
tmap_options(check.and.fix = TRUE)
tm_shape(world) +
tm_borders()
library(tidyverse)
library(sf)
library(giscoR)
library(httr)
library(XML)
library(lwgeom)
library(stringr)
# Africa URL
url <- paste0("https://download.geofabrik.de/africa.html")
# download standard OSM country files
get_africa_links <- function() {
# make http request
res <- httr::GET(url)
# parse data to html format
parse <- XML::htmlParse(res)
# scrape all the href tags
links <- XML::xpathSApply(parse, path = "//a", XML::xmlGetAttr, "href")
# grab links
lnks <- links[-c(1:5)]
# make all links and store in a list
for (l in lnks) {
all_links <- paste0(url, lnks)
}
africa_links <- all_links[grepl("latest-free.shp.zip", all_links)] %>%
stringr::str_remove(".htmlafrica")
return(africa_links)
}
africa_links <- get_africa_links()
for (a in africa_links) {
download.file(a, destfile = basename(a), mode = "wb")
}
dat_col <- function(datafile, column){
datafile$column
}
View(dat_col)
iris
dat <- iris
View(dat)
data_col(dat, species)
dat_col(dat, species)
dat_col <- function(datafile, column){
a <- mean(datafile$column)
return a
dat_col <- function(datafile, column){
a <- mean(datafile$column)
return a
dat_col <- function(datafile, column){
a <- mean(datafile$column)
return(a)
}
dat_col(dat, Species)
View(dat)
names(dat)
dat_col(dat, Sepal.Width)
dat_col(dat, "Sepal.Width")
dat_col <- function(a){
b <- mean(datafile$column)
return(b)
}
dat_col(dat$Sepal.Width)
dat_col <- function(a){
b <- mean(a)
return(b)
}
dat_col(dat$Sepal.Width)
library(ggplot2)
p1 = qplot(1:10,rnorm(10))
p2 = qplot(1:10,rnorm(10))
grid.arrange(p1, p2, ncol=2, main = "Main title")
library(gridExtra)
grid.arrange(p1, p2, ncol=2, main = "Main title")
?grid.arrange
grid.arrange(grobs(p1, p2), ncol=2, main = "Main title")
grid.arrange(grobs= list(p1, p2), ncol=2, main = "Main title")
grid.arrange(p1, p2)
grid.arrange(p1, p2, ncol=2)
grid.arrange(p1, p2, ncol=2, main = "Main title")
library(tidyverse)
library(sf)
library(giscoR)
install.packages("mapview")
library(mapview)
library(terra)
library(terra)
library(terrainr)
install.packages("terrainr")
install.packages("magick")
library(magick)
longlat_crs <- "+proj=longlat +datum=WGS84 +no_defs"
ortho_crs <-'+proj=ortho +lat_0=32.4279 +lon_0=53.688 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs +type=crs'
get_flat_world_sf <- function() {
world <- giscoR::gisco_get_countries(
year = "2016",
epsg = "4326",
resolution = "10"
) %>%
sf::st_transform(longlat_crs)
world_vect <- terra::vect(world)
return(world_vect)
}
world_vect <- get_flat_world_sf()
# 2. NASA DATA
#-------------
get_nasa_data <- function() {
ras <- terra::rast("/vsicurl/https://eoimages.gsfc.nasa.gov/images/imagerecords/144000/144898/BlackMarble_2016_01deg_geo.tif")
rascrop <- terra::crop(x = ras, y = world_vect, snap = "in")
ras_latlong <- terra::project(rascrop, longlat_crs)
ras_ortho <- terra::project(ras_latlong, ortho_crs)
return(ras_ortho)
}
ras_ortho <- get_nasa_data()
r <- ifel(is.na(ras_ortho), 0, ras_ortho)
plot(r)
?ifel
# 3. MAP NIGHTLIGHTS
#-------------------
make_nighlights_globe <- function() {
globe <- ggplot() +
terrainr::geom_spatial_rgb(
data = r,
mapping = aes(
x = x,
y = y,
r = red,
g = green,
b = blue
)
) +
theme_minimal() +
theme(
plot.margin = unit(
c(t = -1, r = -1, b = -1, l = -1), "lines"
),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "black", color = NA),
panel.background = element_rect(fill = "black", color = NA),
legend.background = element_rect(fill = "black", color = NA),
panel.border = element_rect(fill = NA, color = "black"),
) +
labs(
x = "",
y = "",
title = "",
subtitle = "",
caption = ""
)
}
globe <- make_nighlights_globe()
globe
install.packages("conjoint")
install.packages("cregg")
library("cregg")
data("immigration")
data("taxes")
install.packages("interflex")
library(interflex)
install.packages('devtools', repos = 'http://cran.us.r-project.org') # if not already installed
devtools::install_github('xuyiqing/interflex')
linear_m <- function(y,x) {
model <- lm(x ~y),
linear_m <- function(y,x) {
model <- lm(x ~ y)
stargazer(model,
type = "text")
}
data(iris)
force(iris)
names(iris)
linear_m(iris$Sepal.Length, iris$Sepal.Width)
library(stargazer)
linear_m(iris$Sepal.Length, iris$Sepal.Width)
linear_m(iris$Sepal.Length, c(iris$Sepal.Width, iris$Sepal.Width))
}
linear_m <- function(y,x) {
for (i in x) {
model <- lm(x ~ y)
}
stargazer(model,
type = "text")
}
linear_m(iris$Sepal.Length, c(iris$Sepal.Width, iris$Sepal.Width))
linear_m <- function(y,x) {
for (i in x) {
model <- lm(y ~ x)
}
stargazer(model,
type = "text")
}
names(iris)
linear_m(iris$Sepal.Length, c(iris$Sepal.Width, iris$Sepal.Width))
a <- c(iris$Sepal.Width, iris$Petal.Width)
linear_m(iris$Sepal.Length, a)x
linear_m(iris$Sepal.Length, a)
# install.packages("devtools")
devtools::install_github("EvaMaeRey/ggols")
libary(ggols)
library(ggols)
library(tidyverse)
library(tidyverse)
library(ggxmean)
library(tidyverse)
install.packages("ggxmean")
library(dplyr)
library(rlang)
install.packages(c("sf", "sp", "spData", "spdep", "splm", "survival", "text2vec", "textdata", "tidyr", "tidytext", "tokenizers", "WDI"))
library(ggxmean)
install.packages("ggxmean")
# install.packages("devtools")
devtools::install_github("EvaMaeRey/ggxmean")
library(tidyverse)
remove.packages("rlang")
install.packages("rlang")
library(tidyverse)
ggplot(cars) +
aes(x = speed, y = dist,) +
geom_point() +
geom_lm() +
geom_lm_intercept(color = "blue") +
geom_lm_intercept_label(hjust = -.2) +
geom_lm_conf_int() +
geom_lm_residuals() +
geom_lm_fitted() +
geom_lm_formula() +
ggols:::geom_lm_rsquared() #should be moved to ggxmean
library(ggxmean)
ggplot(cars) +
aes(x = speed, y = dist,) +
geom_point() +
geom_lm() +
geom_lm_intercept(color = "blue") +
geom_lm_intercept_label(hjust = -.2) +
geom_lm_conf_int() +
geom_lm_residuals() +
geom_lm_fitted() +
geom_lm_formula() +
ggols:::geom_lm_rsquared() #should be moved to ggxmean
library(plm)
?str
xaringan::summon_remark()
install.packages("xaringan")
xaringan::summon_remark()
# To install the latest version from Github:
# install.packages("devtools")
devtools::install_github("tylermorganwall/rayrender")
install.packages("tidyquant")
"actg" %s===% c("ACTG", "actg", "act", "actga", NA)
library(stringi)
"actg" %s===% c("ACTG", "actg", "act", "actga", NA)
install.packages(c("gganimate", "ggdist", "ggeffects", "ggrepel", "ggtext", "Hmisc", "htmltools", "htmlwidgets", "jtools", "knitr", "lava", "lavaan", "lme4", "lubridate", "maps", "maptools", "marginaleffects", "markdown", "ngram", "pdftools", "plm", "quanteda", "quanteda.textmodels", "quanteda.textplots", "quanteda.textstats", "raster", "readr", "readxl", "reticulate", "rmarkdown", "shiny", "shinyWidgets", "sjPlot", "spatialreg", "spatstat", "stringi", "stringr", "survival", "terra", "text2vec", "tidytext", "tokenizers", "zoo"))
library(fixest)
# install.packages("remotes")
remotes::install_github("mitchelloharawild/distributional")
n <- 20
s <- rnorm(n = n,
mean = 5.5,
sd = 1.4)
bp_s <- bootstrap(s, 1000, var)
n <- 20
s <- rnorm(n = n,
mean = 5.5,
sd = 1.4)
library(bootstrap)
bp_s <- bootstrap(s, 1000, var)
install.packages("xaringan")
n <- 20
s <- rnorm(n = n,
mean = 5.5,
sd = 1.4)
library(bootstrap)
bp_s <- bootstrap::bootstrap(s, 1000, var)
options(htmltools.dir.version = FALSE)
par(mar = c(4, 4, 1, .1))
plot(cars, pch = 19, col = 'darkgray', las = 1)
abline(fit, lwd = 2)
n <- 20
s <- rnorm(n = n,
mean = 5.5,
sd = 1.4)
library(bootstrap)
bp_s <- bootstrap::bootstrap(s, 1000, var)
quickplot(bp_s$thetastar,
geom = "histogram",
bin = 25)
n <- 20
s <- rnorm(n = n,
mean = 5.5,
sd = 1.4)
library(bootstrap)
bp_s <- bootstrap::bootstrap(s, 1000, var)
quickplot(bp_s$thetastar,
geom = "histogram",
bin = 25)
n <- 20
s <- rnorm(n = n,
mean = 5.5,
sd = 1.4)
library(bootstrap)
bp_s <- bootstrap::bootstrap(s, 1000, var)
ggplot() +
geom_histogram(x =bp_s$thetastar,
bin = 25)
n <- 20
s <- rnorm(n = n,
mean = 5.5,
sd = 1.4)
library(bootstrap)
library(ggplot2)
bp_s <- bootstrap::bootstrap(s, 1000, var)
ggplot() +
geom_histogram(x =bp_s$thetastar,
bin = 25)
n <- 20
s <- rnorm(n = n,
mean = 5.5,
sd = 1.4)
library(bootstrap)
library(ggplot2)
bp_s <- bootstrap::bootstrap(s, 1000, var)
ggplot() +
geom_histogram(x = bp_s$thetastar)
library(bootstrap)
?bootstrap
# install.packages("remotes")
remotes::install_github("jhelvy/xaringanBuilder")
library(xaringanBuilder)
library(xaringanBuilder)
remotes::install_github("jhelvy/xaringanBuilder")
renderthis::to_pdf("slides.Rmd")
remotes::install_github('rstudio/chromote')
build_pdf("week_17.Rmd", complex_slides = TRUE, partial_slides = TRUE)
renderthis::to_pdf("week_17.Rmd")
getwd()
setwd("/Users/winniexia/Documents/GitHub/conscience_interest_env_movement/GV903-2023/week_17")
renderthis::to_pdf("week_17.Rmd")
setwd("/Users/winniexia/Documents/GitHub/conscience_interest_env_movement/GV903-2023/week_16")
renderthis::to_pdf("week_16.Rmd")
